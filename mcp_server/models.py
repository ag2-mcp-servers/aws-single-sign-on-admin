# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:59:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessControlAttributeKey(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]+', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]+', min_length=1, max_length=128)


class AccessControlAttributeValueSource(
    RootModel[
        constr(
            pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@\[\]\{\}\$\\"]*',
            min_length=0,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@\[\]\{\}\$\\"]*',
        min_length=0,
        max_length=256,
    )


class AccessControlAttributeValueSourceList(
    RootModel[List[AccessControlAttributeValueSource]]
):
    root: List[AccessControlAttributeValueSource] = Field(
        ..., max_length=1, min_length=1
    )


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(pattern=r'\d{12}', min_length=12, max_length=12)]):
    root: constr(pattern=r'\d{12}', min_length=12, max_length=12)


class AccountList(RootModel[List[AccountId]]):
    root: List[AccountId]


class AttachCustomerManagedPolicyReferenceToPermissionSetResponse(BaseModel):
    pass


class AttachManagedPolicyToPermissionSetResponse(BaseModel):
    pass


class ConflictException(RootModel[Any]):
    root: Any


class CreateInstanceAccessControlAttributeConfigurationResponse(BaseModel):
    pass


class Date(RootModel[datetime]):
    root: datetime


class DeleteInlinePolicyFromPermissionSetResponse(BaseModel):
    pass


class DeleteInstanceAccessControlAttributeConfigurationResponse(BaseModel):
    pass


class DeletePermissionSetResponse(BaseModel):
    pass


class DeletePermissionsBoundaryFromPermissionSetResponse(BaseModel):
    pass


class DetachCustomerManagedPolicyReferenceFromPermissionSetResponse(BaseModel):
    pass


class DetachManagedPolicyFromPermissionSetResponse(BaseModel):
    pass


class Duration(
    RootModel[
        constr(
            pattern=r'^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$',
            min_length=1,
            max_length=100,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$',
        min_length=1,
        max_length=100,
    )


class Id(RootModel[constr(pattern=r'^[a-zA-Z0-9-]*', min_length=1, max_length=64)]):
    root: constr(pattern=r'^[a-zA-Z0-9-]*', min_length=1, max_length=64)


class InstanceAccessControlAttributeConfigurationStatus(Enum):
    ENABLED = 'ENABLED'
    CREATION_IN_PROGRESS = 'CREATION_IN_PROGRESS'
    CREATION_FAILED = 'CREATION_FAILED'


class InstanceAccessControlAttributeConfigurationStatusReason(RootModel[str]):
    root: str


class InstanceArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::instance/(sso)?ins-[a-zA-Z0-9-.]{16}',
            min_length=10,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::instance/(sso)?ins-[a-zA-Z0-9-.]{16}',
        min_length=10,
        max_length=1224,
    )


class InstanceMetadata(BaseModel):
    IdentityStoreId: Optional[Id] = None
    InstanceArn_1: Optional[InstanceArn] = Field(None, alias='InstanceArn')


class InternalServerException(RootModel[Any]):
    root: Any


class ManagedPolicyArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):iam::aws:policy/[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):iam::aws:policy/[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]+',
        min_length=20,
        max_length=2048,
    )


class ManagedPolicyName(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class ManagedPolicyPath(
    RootModel[
        constr(pattern=r'((/[A-Za-z0-9\.,\+@=_-]+)*)/', min_length=1, max_length=512)
    ]
):
    root: constr(pattern=r'((/[A-Za-z0-9\.,\+@=_-]+)*)/', min_length=1, max_length=512)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Name(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PermissionSetArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::permissionSet/(sso)?ins-[a-zA-Z0-9-.]{16}/ps-[a-zA-Z0-9-./]{16}',
            min_length=10,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::permissionSet/(sso)?ins-[a-zA-Z0-9-.]{16}/ps-[a-zA-Z0-9-./]{16}',
        min_length=10,
        max_length=1224,
    )


class PermissionSetDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u00A0-\u00FF]*',
            min_length=1,
            max_length=700,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u00A0-\u00FF]*',
        min_length=1,
        max_length=700,
    )


class PermissionSetList(RootModel[List[PermissionSetArn]]):
    root: List[PermissionSetArn]


class PermissionSetName(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=32)


class PermissionSetPolicyDocument(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=10240,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=10240
    )


class PrincipalId(
    RootModel[
        constr(
            pattern=r'^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$',
            min_length=1,
            max_length=47,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$',
        min_length=1,
        max_length=47,
    )


class PrincipalType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'


class ProvisionTargetType(Enum):
    AWS_ACCOUNT = 'AWS_ACCOUNT'
    ALL_PROVISIONED_ACCOUNTS = 'ALL_PROVISIONED_ACCOUNTS'


class ProvisioningStatus(Enum):
    LATEST_PERMISSION_SET_PROVISIONED = 'LATEST_PERMISSION_SET_PROVISIONED'
    LATEST_PERMISSION_SET_NOT_PROVISIONED = 'LATEST_PERMISSION_SET_NOT_PROVISIONED'


class PutInlinePolicyToPermissionSetRequest(BaseModel):
    InlinePolicy: PermissionSetPolicyDocument
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class PutInlinePolicyToPermissionSetResponse(BaseModel):
    pass


class PutPermissionsBoundaryToPermissionSetResponse(BaseModel):
    pass


class Reason(RootModel[constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*')]):
    root: constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*')


class RelayState(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9&$@#\\\/%?=~\-_\'"|!:,.;*+\[\]\ \(\)\{\}]+',
            min_length=1,
            max_length=240,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9&$@#\\\/%?=~\-_\'"|!:,.;*+\[\]\ \(\)\{\}]+',
        min_length=1,
        max_length=240,
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StatusValues(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TaggableResourceArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::permissionSet/(sso)?ins-[a-zA-Z0-9-.]{16}/ps-[a-zA-Z0-9-./]{16}',
            min_length=10,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::permissionSet/(sso)?ins-[a-zA-Z0-9-.]{16}/ps-[a-zA-Z0-9-./]{16}',
        min_length=10,
        max_length=2048,
    )


class TargetId(RootModel[constr(pattern=r'\d{12}', min_length=12, max_length=12)]):
    root: constr(pattern=r'\d{12}', min_length=12, max_length=12)


class TargetType(Enum):
    AWS_ACCOUNT = 'AWS_ACCOUNT'


class ThrottlingException(RootModel[Any]):
    root: Any


class Token(RootModel[constr(pattern=r'^[-a-zA-Z0-9+=/_]*', max_length=2048)]):
    root: constr(pattern=r'^[-a-zA-Z0-9+=/_]*', max_length=2048)


class UUId(
    RootModel[
        constr(
            pattern=r'\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b',
        min_length=36,
        max_length=36,
    )


class UntagResourceRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    ResourceArn: TaggableResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateInstanceAccessControlAttributeConfigurationResponse(BaseModel):
    pass


class UpdatePermissionSetRequest(BaseModel):
    Description: Optional[PermissionSetDescription] = None
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    RelayState_1: Optional[RelayState] = Field(None, alias='RelayState')
    SessionDuration: Optional[Duration] = None


class UpdatePermissionSetResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    SWBExternalService_AttachCustomerManagedPolicyReferenceToPermissionSet = (
        'SWBExternalService.AttachCustomerManagedPolicyReferenceToPermissionSet'
    )


class XAmzTarget1(Enum):
    SWBExternalService_AttachManagedPolicyToPermissionSet = (
        'SWBExternalService.AttachManagedPolicyToPermissionSet'
    )


class XAmzTarget2(Enum):
    SWBExternalService_CreateAccountAssignment = (
        'SWBExternalService.CreateAccountAssignment'
    )


class XAmzTarget3(Enum):
    SWBExternalService_CreateInstanceAccessControlAttributeConfiguration = (
        'SWBExternalService.CreateInstanceAccessControlAttributeConfiguration'
    )


class XAmzTarget4(Enum):
    SWBExternalService_CreatePermissionSet = 'SWBExternalService.CreatePermissionSet'


class XAmzTarget5(Enum):
    SWBExternalService_DeleteAccountAssignment = (
        'SWBExternalService.DeleteAccountAssignment'
    )


class XAmzTarget6(Enum):
    SWBExternalService_DeleteInlinePolicyFromPermissionSet = (
        'SWBExternalService.DeleteInlinePolicyFromPermissionSet'
    )


class XAmzTarget7(Enum):
    SWBExternalService_DeleteInstanceAccessControlAttributeConfiguration = (
        'SWBExternalService.DeleteInstanceAccessControlAttributeConfiguration'
    )


class XAmzTarget8(Enum):
    SWBExternalService_DeletePermissionSet = 'SWBExternalService.DeletePermissionSet'


class XAmzTarget9(Enum):
    SWBExternalService_DeletePermissionsBoundaryFromPermissionSet = (
        'SWBExternalService.DeletePermissionsBoundaryFromPermissionSet'
    )


class XAmzTarget10(Enum):
    SWBExternalService_DescribeAccountAssignmentCreationStatus = (
        'SWBExternalService.DescribeAccountAssignmentCreationStatus'
    )


class XAmzTarget11(Enum):
    SWBExternalService_DescribeAccountAssignmentDeletionStatus = (
        'SWBExternalService.DescribeAccountAssignmentDeletionStatus'
    )


class XAmzTarget12(Enum):
    SWBExternalService_DescribeInstanceAccessControlAttributeConfiguration = (
        'SWBExternalService.DescribeInstanceAccessControlAttributeConfiguration'
    )


class XAmzTarget13(Enum):
    SWBExternalService_DescribePermissionSet = (
        'SWBExternalService.DescribePermissionSet'
    )


class XAmzTarget14(Enum):
    SWBExternalService_DescribePermissionSetProvisioningStatus = (
        'SWBExternalService.DescribePermissionSetProvisioningStatus'
    )


class XAmzTarget15(Enum):
    SWBExternalService_DetachCustomerManagedPolicyReferenceFromPermissionSet = (
        'SWBExternalService.DetachCustomerManagedPolicyReferenceFromPermissionSet'
    )


class XAmzTarget16(Enum):
    SWBExternalService_DetachManagedPolicyFromPermissionSet = (
        'SWBExternalService.DetachManagedPolicyFromPermissionSet'
    )


class XAmzTarget17(Enum):
    SWBExternalService_GetInlinePolicyForPermissionSet = (
        'SWBExternalService.GetInlinePolicyForPermissionSet'
    )


class XAmzTarget18(Enum):
    SWBExternalService_GetPermissionsBoundaryForPermissionSet = (
        'SWBExternalService.GetPermissionsBoundaryForPermissionSet'
    )


class XAmzTarget19(Enum):
    SWBExternalService_ListAccountAssignmentCreationStatus = (
        'SWBExternalService.ListAccountAssignmentCreationStatus'
    )


class XAmzTarget20(Enum):
    SWBExternalService_ListAccountAssignmentDeletionStatus = (
        'SWBExternalService.ListAccountAssignmentDeletionStatus'
    )


class XAmzTarget21(Enum):
    SWBExternalService_ListAccountAssignments = (
        'SWBExternalService.ListAccountAssignments'
    )


class XAmzTarget22(Enum):
    SWBExternalService_ListAccountsForProvisionedPermissionSet = (
        'SWBExternalService.ListAccountsForProvisionedPermissionSet'
    )


class XAmzTarget23(Enum):
    SWBExternalService_ListCustomerManagedPolicyReferencesInPermissionSet = (
        'SWBExternalService.ListCustomerManagedPolicyReferencesInPermissionSet'
    )


class XAmzTarget24(Enum):
    SWBExternalService_ListInstances = 'SWBExternalService.ListInstances'


class XAmzTarget25(Enum):
    SWBExternalService_ListManagedPoliciesInPermissionSet = (
        'SWBExternalService.ListManagedPoliciesInPermissionSet'
    )


class XAmzTarget26(Enum):
    SWBExternalService_ListPermissionSetProvisioningStatus = (
        'SWBExternalService.ListPermissionSetProvisioningStatus'
    )


class XAmzTarget27(Enum):
    SWBExternalService_ListPermissionSets = 'SWBExternalService.ListPermissionSets'


class XAmzTarget28(Enum):
    SWBExternalService_ListPermissionSetsProvisionedToAccount = (
        'SWBExternalService.ListPermissionSetsProvisionedToAccount'
    )


class XAmzTarget29(Enum):
    SWBExternalService_ListTagsForResource = 'SWBExternalService.ListTagsForResource'


class XAmzTarget30(Enum):
    SWBExternalService_ProvisionPermissionSet = (
        'SWBExternalService.ProvisionPermissionSet'
    )


class XAmzTarget31(Enum):
    SWBExternalService_PutInlinePolicyToPermissionSet = (
        'SWBExternalService.PutInlinePolicyToPermissionSet'
    )


class XAmzTarget32(Enum):
    SWBExternalService_PutPermissionsBoundaryToPermissionSet = (
        'SWBExternalService.PutPermissionsBoundaryToPermissionSet'
    )


class XAmzTarget33(Enum):
    SWBExternalService_TagResource = 'SWBExternalService.TagResource'


class XAmzTarget34(Enum):
    SWBExternalService_UntagResource = 'SWBExternalService.UntagResource'


class XAmzTarget35(Enum):
    SWBExternalService_UpdateInstanceAccessControlAttributeConfiguration = (
        'SWBExternalService.UpdateInstanceAccessControlAttributeConfiguration'
    )


class XAmzTarget36(Enum):
    SWBExternalService_UpdatePermissionSet = 'SWBExternalService.UpdatePermissionSet'


class AccessControlAttributeValue(BaseModel):
    Source: AccessControlAttributeValueSourceList


class AccountAssignment(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    PermissionSetArn_1: Optional[PermissionSetArn] = Field(
        None, alias='PermissionSetArn'
    )
    PrincipalId_1: Optional[PrincipalId] = Field(None, alias='PrincipalId')
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')


class AccountAssignmentList(RootModel[List[AccountAssignment]]):
    root: List[AccountAssignment]


class AccountAssignmentOperationStatus(BaseModel):
    CreatedDate: Optional[Date] = None
    FailureReason: Optional[Reason] = None
    PermissionSetArn_1: Optional[PermissionSetArn] = Field(
        None, alias='PermissionSetArn'
    )
    PrincipalId_1: Optional[PrincipalId] = Field(None, alias='PrincipalId')
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')
    RequestId: Optional[UUId] = None
    Status: Optional[StatusValues] = None
    TargetId_1: Optional[TargetId] = Field(None, alias='TargetId')
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')


class AccountAssignmentOperationStatusMetadata(BaseModel):
    CreatedDate: Optional[Date] = None
    RequestId: Optional[UUId] = None
    Status: Optional[StatusValues] = None


class AttachManagedPolicyToPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    ManagedPolicyArn_1: ManagedPolicyArn = Field(..., alias='ManagedPolicyArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class AttachedManagedPolicy(BaseModel):
    Arn: Optional[ManagedPolicyArn] = None
    Name_1: Optional[Name] = Field(None, alias='Name')


class AttachedManagedPolicyList(RootModel[List[AttachedManagedPolicy]]):
    root: List[AttachedManagedPolicy]


class CreateAccountAssignmentRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    PrincipalId_1: PrincipalId = Field(..., alias='PrincipalId')
    PrincipalType_1: PrincipalType = Field(..., alias='PrincipalType')
    TargetId_1: TargetId = Field(..., alias='TargetId')
    TargetType_1: TargetType = Field(..., alias='TargetType')


class CreateAccountAssignmentResponse(BaseModel):
    AccountAssignmentCreationStatus: Optional[AccountAssignmentOperationStatus] = None


class CustomerManagedPolicyReference(BaseModel):
    Name: ManagedPolicyName
    Path: Optional[ManagedPolicyPath] = None


class CustomerManagedPolicyReferenceList(
    RootModel[List[CustomerManagedPolicyReference]]
):
    root: List[CustomerManagedPolicyReference]


class DeleteAccountAssignmentRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    PrincipalId_1: PrincipalId = Field(..., alias='PrincipalId')
    PrincipalType_1: PrincipalType = Field(..., alias='PrincipalType')
    TargetId_1: TargetId = Field(..., alias='TargetId')
    TargetType_1: TargetType = Field(..., alias='TargetType')


class DeleteAccountAssignmentResponse(BaseModel):
    AccountAssignmentDeletionStatus: Optional[AccountAssignmentOperationStatus] = None


class DeleteInlinePolicyFromPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class DeleteInstanceAccessControlAttributeConfigurationRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class DeletePermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class DeletePermissionsBoundaryFromPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class DescribeAccountAssignmentCreationStatusRequest(BaseModel):
    AccountAssignmentCreationRequestId: UUId
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class DescribeAccountAssignmentCreationStatusResponse(BaseModel):
    AccountAssignmentCreationStatus: Optional[AccountAssignmentOperationStatus] = None


class DescribeAccountAssignmentDeletionStatusRequest(BaseModel):
    AccountAssignmentDeletionRequestId: UUId
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class DescribeAccountAssignmentDeletionStatusResponse(BaseModel):
    AccountAssignmentDeletionStatus: Optional[AccountAssignmentOperationStatus] = None


class DescribeInstanceAccessControlAttributeConfigurationRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class DescribePermissionSetProvisioningStatusRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    ProvisionPermissionSetRequestId: UUId


class DescribePermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class DetachCustomerManagedPolicyReferenceFromPermissionSetRequest(BaseModel):
    CustomerManagedPolicyReference_1: CustomerManagedPolicyReference = Field(
        ..., alias='CustomerManagedPolicyReference'
    )
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class DetachManagedPolicyFromPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    ManagedPolicyArn_1: ManagedPolicyArn = Field(..., alias='ManagedPolicyArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class GetInlinePolicyForPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class GetInlinePolicyForPermissionSetResponse(BaseModel):
    InlinePolicy: Optional[PermissionSetPolicyDocument] = None


class GetPermissionsBoundaryForPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class InstanceList(RootModel[List[InstanceMetadata]]):
    root: List[InstanceMetadata]


class ListAccountAssignmentsRequest(BaseModel):
    AccountId: TargetId
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class ListAccountAssignmentsResponse(BaseModel):
    AccountAssignments: Optional[AccountAssignmentList] = None
    NextToken: Optional[Token] = None


class ListAccountsForProvisionedPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    ProvisioningStatus_1: Optional[ProvisioningStatus] = Field(
        None, alias='ProvisioningStatus'
    )


class ListAccountsForProvisionedPermissionSetResponse(BaseModel):
    AccountIds: Optional[AccountList] = None
    NextToken: Optional[Token] = None


class ListCustomerManagedPolicyReferencesInPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class ListCustomerManagedPolicyReferencesInPermissionSetResponse(BaseModel):
    CustomerManagedPolicyReferences: Optional[CustomerManagedPolicyReferenceList] = None
    NextToken: Optional[Token] = None


class ListInstancesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListInstancesResponse(BaseModel):
    Instances: Optional[InstanceList] = None
    NextToken: Optional[Token] = None


class ListManagedPoliciesInPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class ListManagedPoliciesInPermissionSetResponse(BaseModel):
    AttachedManagedPolicies: Optional[AttachedManagedPolicyList] = None
    NextToken: Optional[Token] = None


class ListPermissionSetsProvisionedToAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    ProvisioningStatus_1: Optional[ProvisioningStatus] = Field(
        None, alias='ProvisioningStatus'
    )


class ListPermissionSetsProvisionedToAccountResponse(BaseModel):
    NextToken: Optional[Token] = None
    PermissionSets: Optional[PermissionSetList] = None


class ListPermissionSetsRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListPermissionSetsResponse(BaseModel):
    NextToken: Optional[Token] = None
    PermissionSets: Optional[PermissionSetList] = None


class ListTagsForResourceRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    NextToken: Optional[Token] = None
    ResourceArn: TaggableResourceArn


class OperationStatusFilter(BaseModel):
    Status: Optional[StatusValues] = None


class PermissionSet(BaseModel):
    CreatedDate: Optional[Date] = None
    Description: Optional[PermissionSetDescription] = None
    Name: Optional[PermissionSetName] = None
    PermissionSetArn_1: Optional[PermissionSetArn] = Field(
        None, alias='PermissionSetArn'
    )
    RelayState_1: Optional[RelayState] = Field(None, alias='RelayState')
    SessionDuration: Optional[Duration] = None


class PermissionSetProvisioningStatus(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreatedDate: Optional[Date] = None
    FailureReason: Optional[Reason] = None
    PermissionSetArn_1: Optional[PermissionSetArn] = Field(
        None, alias='PermissionSetArn'
    )
    RequestId: Optional[UUId] = None
    Status: Optional[StatusValues] = None


class PermissionSetProvisioningStatusMetadata(BaseModel):
    CreatedDate: Optional[Date] = None
    RequestId: Optional[UUId] = None
    Status: Optional[StatusValues] = None


class PermissionsBoundary(BaseModel):
    CustomerManagedPolicyReference_1: Optional[CustomerManagedPolicyReference] = Field(
        None, alias='CustomerManagedPolicyReference'
    )
    ManagedPolicyArn_1: Optional[ManagedPolicyArn] = Field(
        None, alias='ManagedPolicyArn'
    )


class ProvisionPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    TargetId_1: Optional[TargetId] = Field(None, alias='TargetId')
    TargetType: ProvisionTargetType


class ProvisionPermissionSetResponse(BaseModel):
    PermissionSetProvisioningStatus_1: Optional[PermissionSetProvisioningStatus] = (
        Field(None, alias='PermissionSetProvisioningStatus')
    )


class PutPermissionsBoundaryToPermissionSetRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')
    PermissionsBoundary_1: PermissionsBoundary = Field(..., alias='PermissionsBoundary')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class TagResourceRequest(BaseModel):
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    ResourceArn: TaggableResourceArn
    Tags: TagList


class AccessControlAttribute(BaseModel):
    Key: AccessControlAttributeKey
    Value: AccessControlAttributeValue


class AccessControlAttributeList(RootModel[List[AccessControlAttribute]]):
    root: List[AccessControlAttribute] = Field(..., max_length=50, min_length=0)


class AccountAssignmentOperationStatusList(
    RootModel[List[AccountAssignmentOperationStatusMetadata]]
):
    root: List[AccountAssignmentOperationStatusMetadata]


class AttachCustomerManagedPolicyReferenceToPermissionSetRequest(BaseModel):
    CustomerManagedPolicyReference_1: CustomerManagedPolicyReference = Field(
        ..., alias='CustomerManagedPolicyReference'
    )
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    PermissionSetArn_1: PermissionSetArn = Field(..., alias='PermissionSetArn')


class CreatePermissionSetRequest(BaseModel):
    Description: Optional[PermissionSetDescription] = None
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    Name: PermissionSetName
    RelayState_1: Optional[RelayState] = Field(None, alias='RelayState')
    SessionDuration: Optional[Duration] = None
    Tags: Optional[TagList] = None


class CreatePermissionSetResponse(BaseModel):
    PermissionSet_1: Optional[PermissionSet] = Field(None, alias='PermissionSet')


class DescribePermissionSetProvisioningStatusResponse(BaseModel):
    PermissionSetProvisioningStatus_1: Optional[PermissionSetProvisioningStatus] = (
        Field(None, alias='PermissionSetProvisioningStatus')
    )


class DescribePermissionSetResponse(BaseModel):
    PermissionSet_1: Optional[PermissionSet] = Field(None, alias='PermissionSet')


class GetPermissionsBoundaryForPermissionSetResponse(BaseModel):
    PermissionsBoundary_1: Optional[PermissionsBoundary] = Field(
        None, alias='PermissionsBoundary'
    )


class InstanceAccessControlAttributeConfiguration(BaseModel):
    AccessControlAttributes: AccessControlAttributeList


class ListAccountAssignmentCreationStatusRequest(BaseModel):
    Filter: Optional[OperationStatusFilter] = None
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListAccountAssignmentCreationStatusResponse(BaseModel):
    AccountAssignmentsCreationStatus: Optional[AccountAssignmentOperationStatusList] = (
        None
    )
    NextToken: Optional[Token] = None


class ListAccountAssignmentDeletionStatusRequest(BaseModel):
    Filter: Optional[OperationStatusFilter] = None
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListAccountAssignmentDeletionStatusResponse(BaseModel):
    AccountAssignmentsDeletionStatus: Optional[AccountAssignmentOperationStatusList] = (
        None
    )
    NextToken: Optional[Token] = None


class ListPermissionSetProvisioningStatusRequest(BaseModel):
    Filter: Optional[OperationStatusFilter] = None
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListTagsForResourceResponse(BaseModel):
    NextToken: Optional[Token] = None
    Tags: Optional[TagList] = None


class PermissionSetProvisioningStatusList(
    RootModel[List[PermissionSetProvisioningStatusMetadata]]
):
    root: List[PermissionSetProvisioningStatusMetadata]


class UpdateInstanceAccessControlAttributeConfigurationRequest(BaseModel):
    InstanceAccessControlAttributeConfiguration_1: (
        InstanceAccessControlAttributeConfiguration
    ) = Field(..., alias='InstanceAccessControlAttributeConfiguration')
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class CreateInstanceAccessControlAttributeConfigurationRequest(BaseModel):
    InstanceAccessControlAttributeConfiguration_1: (
        InstanceAccessControlAttributeConfiguration
    ) = Field(..., alias='InstanceAccessControlAttributeConfiguration')
    InstanceArn_1: InstanceArn = Field(..., alias='InstanceArn')


class DescribeInstanceAccessControlAttributeConfigurationResponse(BaseModel):
    InstanceAccessControlAttributeConfiguration_1: Optional[
        InstanceAccessControlAttributeConfiguration
    ] = Field(None, alias='InstanceAccessControlAttributeConfiguration')
    Status: Optional[InstanceAccessControlAttributeConfigurationStatus] = None
    StatusReason: Optional[InstanceAccessControlAttributeConfigurationStatusReason] = (
        None
    )


class ListPermissionSetProvisioningStatusResponse(BaseModel):
    NextToken: Optional[Token] = None
    PermissionSetsProvisioningStatus: Optional[PermissionSetProvisioningStatusList] = (
        None
    )
